/*
 * Copyright (C) 2004-2005  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.testmodel;

import com.exedio.cope.Item;
import com.exedio.cope.ItemAttribute;
import com.exedio.cope.StringAttribute;
import com.exedio.cope.UniqueConstraint;


/**
 * @persistent
 * @author Ralf Wiebicke
 */
public class AttributeEmptyItem extends Item
{
	public static final ItemAttribute parent = itemAttribute(DEFAULT, AttributeItem.class);

	public static final ItemAttribute key = itemAttribute(DEFAULT, EmptyItem.class);
	
	public static final UniqueConstraint parentKey = uniqueConstraint(parent, key);

	public static final StringAttribute someQualifiedString = stringAttribute(DEFAULT);

/**

	 **
	 * Creates a new AttributeEmptyItem with all the attributes initially needed.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public AttributeEmptyItem()
	{
		this(new com.exedio.cope.AttributeValue[]{
		});
	}/**

	 **
	 * Creates a new AttributeEmptyItem and sets the given attributes initially.
	 * This constructor is called by {@link com.exedio.cope.Type#newItem Type.newItem}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */private AttributeEmptyItem(final com.exedio.cope.AttributeValue[] initialAttributes)
	{
		super(initialAttributes);
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @see Item#Item(com.exedio.cope.util.ReactivationConstructorDummy,int)
	 *
 */private AttributeEmptyItem(com.exedio.cope.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * Returns the value of the persistent attribute {@link #parent}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final AttributeItem getParent()
	{
		return (AttributeItem)get(AttributeEmptyItem.parent);
	}/**

	 **
	 * Sets a new value for the persistent attribute {@link #parent}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final void setParent(final AttributeItem parent)
			throws
				com.exedio.cope.UniqueViolationException
	{
		try
		{
			setAttribute(AttributeEmptyItem.parent,parent);
		}
		catch(com.exedio.cope.LengthViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.NotNullViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.ReadOnlyViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
	}/**

	 **
	 * Returns the value of the persistent attribute {@link #key}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final EmptyItem getKey()
	{
		return (EmptyItem)get(AttributeEmptyItem.key);
	}/**

	 **
	 * Sets a new value for the persistent attribute {@link #key}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final void setKey(final EmptyItem key)
			throws
				com.exedio.cope.UniqueViolationException
	{
		try
		{
			setAttribute(AttributeEmptyItem.key,key);
		}
		catch(com.exedio.cope.LengthViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.NotNullViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.ReadOnlyViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
	}/**

	 **
	 * Returns the value of the persistent attribute {@link #someQualifiedString}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getSomeQualifiedString()
	{
		return (java.lang.String)get(AttributeEmptyItem.someQualifiedString);
	}/**

	 **
	 * Sets a new value for the persistent attribute {@link #someQualifiedString}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final void setSomeQualifiedString(final java.lang.String someQualifiedString)
	{
		try
		{
			setAttribute(AttributeEmptyItem.someQualifiedString,someQualifiedString);
		}
		catch(com.exedio.cope.LengthViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.NotNullViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.ReadOnlyViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.UniqueViolationException e)
		{
			throw new com.exedio.cope.NestingRuntimeException(e);
		}
	}/**

	 **
	 * Finds a attributeEmptyItem by it's unique attributes.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @param parent shall be equal to attribute {@link #parent}.
	 * @param key shall be equal to attribute {@link #key}.
	 *
 */public static final AttributeEmptyItem findByParentKey(final AttributeItem parent,final EmptyItem key)
	{
		return (AttributeEmptyItem)AttributeEmptyItem.parentKey.searchUnique(new Object[]{parent,key});
	}/**

	 **
	 * The persistent type information for attributeEmptyItem.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public static final com.exedio.cope.Type TYPE = 
		new com.exedio.cope.Type(AttributeEmptyItem.class)
;}
