
package com.exedio.cope.testmodel;

import com.exedio.cope.lib.Item;
import com.exedio.cope.lib.MediaAttribute;
import com.exedio.cope.lib.MediaAttributeVariant;

/**
 * @persistent
 */
public class MediaItem extends Item
{
	public static final MediaAttribute file = mediaAttribute(DEFAULT);

	public static final MediaAttribute image = mediaAttribute(DEFAULT, "image");
	
	public static final MediaAttributeVariant imageBB240 = mediaAttributeVariant(image);

	public static final MediaAttribute photo = mediaAttribute(DEFAULT, "image", "jpeg");
	
	public static final MediaAttributeVariant photoBB65 = mediaAttributeVariant(photo);

	public static final MediaAttributeVariant photoProgressive = mediaAttributeVariant(photo);
	
/**

	 **
	 * Creates a new MediaItem with all the attributes initially needed.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public MediaItem()
	{
		super(new com.exedio.cope.lib.AttributeValue[]{
		});
	}/**

	 **
	 * Creates a new MediaItem and sets the given attributes initially.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */protected MediaItem(final com.exedio.cope.lib.AttributeValue[] initialAttributes)
	{
		super(initialAttributes);
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @see Item#Item(com.exedio.cope.lib.util.ReactivationConstructorDummy,int)
	 *
 */private MediaItem(com.exedio.cope.lib.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * Returns a URL the data of the media attribute {@link #file} is available under.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getFileURL()
	{
		return getMediaURL(MediaItem.file);
	}/**

	 **
	 * Returns the major mime type of the media attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getFileMimeMajor()
	{
		return getMediaMimeMajor(MediaItem.file);
	}/**

	 **
	 * Returns the minor mime type of the media attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getFileMimeMinor()
	{
		return getMediaMimeMinor(MediaItem.file);
	}/**

	 **
	 * Returns the data of the media attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.io.InputStream getFileData()
	{
		return getMediaData(MediaItem.file);
	}/**

	 **
	 * Sets the new data for the media attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @throws java.io.IOException if accessing <code>data</code> throws an IOException.
	 *
 */public final void setFileData(final java.io.InputStream data,final java.lang.String mimeMajor,final java.lang.String mimeMinor)throws java.io.IOException
	{
		try
		{
			setMediaData(MediaItem.file,data,mimeMajor,mimeMinor);
		}
		catch(com.exedio.cope.lib.NotNullViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
	}/**

	 **
	 * Returns a URL the data of the media attribute {@link #image} is available under.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getImageURL()
	{
		return getMediaURL(MediaItem.image);
	}/**

	 **
	 * Returns a URL the data of the {@link #imageBB240 BB240} variant of the media attribute {@link #image} is available under.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getImageURLBB240()
	{
		return getMediaURL(MediaItem.imageBB240);
	}/**

	 **
	 * Returns the major mime type of the media attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getImageMimeMajor()
	{
		return getMediaMimeMajor(MediaItem.image);
	}/**

	 **
	 * Returns the minor mime type of the media attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getImageMimeMinor()
	{
		return getMediaMimeMinor(MediaItem.image);
	}/**

	 **
	 * Returns the data of the media attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.io.InputStream getImageData()
	{
		return getMediaData(MediaItem.image);
	}/**

	 **
	 * Sets the new data for the media attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @throws java.io.IOException if accessing <code>data</code> throws an IOException.
	 *
 */public final void setImageData(final java.io.InputStream data,final java.lang.String mimeMinor)throws java.io.IOException
	{
		try
		{
			setMediaData(MediaItem.image,data,null,mimeMinor);
		}
		catch(com.exedio.cope.lib.NotNullViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
	}/**

	 **
	 * Returns a URL the data of the media attribute {@link #photo} is available under.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getPhotoURL()
	{
		return getMediaURL(MediaItem.photo);
	}/**

	 **
	 * Returns a URL the data of the {@link #photoBB65 BB65} variant of the media attribute {@link #photo} is available under.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getPhotoURLBB65()
	{
		return getMediaURL(MediaItem.photoBB65);
	}/**

	 **
	 * Returns a URL the data of the {@link #photoProgressive Progressive} variant of the media attribute {@link #photo} is available under.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getPhotoURLProgressive()
	{
		return getMediaURL(MediaItem.photoProgressive);
	}/**

	 **
	 * Returns the major mime type of the media attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getPhotoMimeMajor()
	{
		return getMediaMimeMajor(MediaItem.photo);
	}/**

	 **
	 * Returns the minor mime type of the media attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getPhotoMimeMinor()
	{
		return getMediaMimeMinor(MediaItem.photo);
	}/**

	 **
	 * Returns the data of the media attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.io.InputStream getPhotoData()
	{
		return getMediaData(MediaItem.photo);
	}/**

	 **
	 * Sets the new data for the media attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @throws java.io.IOException if accessing <code>data</code> throws an IOException.
	 *
 */public final void setPhotoData(final java.io.InputStream data)throws java.io.IOException
	{
		try
		{
			setMediaData(MediaItem.photo,data,null,null);
		}
		catch(com.exedio.cope.lib.NotNullViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
	}/**

	 **
	 * The persistent type information for mediaItem.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public static final com.exedio.cope.lib.Type TYPE = 
		new com.exedio.cope.lib.Type(MediaItem.class)
;}
