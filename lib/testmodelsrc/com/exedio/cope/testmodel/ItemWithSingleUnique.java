/*
 * Copyright (C) 2004-2005  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.testmodel;

import com.exedio.cope.lib.Item;
import com.exedio.cope.lib.StringAttribute;

/**
 * An item having a unique attribute.
 * @persistent
 * @author Ralf Wiebicke
 */
public class ItemWithSingleUnique extends Item
{
	/**
	 * An attribute that is unique.
	 */
	public static final StringAttribute uniqueString = stringAttribute(UNIQUE);

/**

	 **
	 * Creates a new ItemWithSingleUnique with all the attributes initially needed.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public ItemWithSingleUnique()
	{
		this(new com.exedio.cope.lib.AttributeValue[]{
		});
	}/**

	 **
	 * Creates a new ItemWithSingleUnique and sets the given attributes initially.
	 * This constructor is called by {@link com.exedio.cope.lib.Type#newItem Type.newItem}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */private ItemWithSingleUnique(final com.exedio.cope.lib.AttributeValue[] initialAttributes)
	{
		super(initialAttributes);
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @see Item#Item(com.exedio.cope.lib.util.ReactivationConstructorDummy,int)
	 *
 */private ItemWithSingleUnique(com.exedio.cope.lib.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * Returns the value of the persistent attribute {@link #uniqueString}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final java.lang.String getUniqueString()
	{
		return (java.lang.String)getAttribute(ItemWithSingleUnique.uniqueString);
	}/**

	 **
	 * Sets a new value for the persistent attribute {@link #uniqueString}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public final void setUniqueString(final java.lang.String uniqueString)
			throws
				com.exedio.cope.lib.UniqueViolationException
	{
		try
		{
			setAttribute(ItemWithSingleUnique.uniqueString,uniqueString);
		}
		catch(com.exedio.cope.lib.LengthViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.lib.NotNullViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
		catch(com.exedio.cope.lib.ReadOnlyViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
	}/**

	 **
	 * Finds a itemWithSingleUnique by it's unique attributes.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @param searchedUniqueString shall be equal to attribute {@link #uniqueString}.
	 *
 */public static final ItemWithSingleUnique findByUniqueString(final java.lang.String searchedUniqueString)
	{
		return (ItemWithSingleUnique)uniqueString.searchUnique(searchedUniqueString);
	}/**

	 **
	 * The persistent type information for itemWithSingleUnique.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public static final com.exedio.cope.lib.Type TYPE = 
		new com.exedio.cope.lib.Type(ItemWithSingleUnique.class)
;}
