
package com.exedio.cope.lib;

/**
 * @persistent
 */
public class MediaItem extends Item
{
	static final MediaAttribute file = new MediaAttribute(DEFAULT);

	static final MediaAttribute image = new MediaAttribute(DEFAULT, "image");
	
	static final MediaAttributeVariant imageBB240 = new MediaAttributeVariant(image);

	static final MediaAttribute photo = new MediaAttribute(DEFAULT, "image", "jpeg");
	
	static final MediaAttributeVariant photoBB65 = new MediaAttributeVariant(photo);

	static final MediaAttributeVariant photoProgressive = new MediaAttributeVariant(photo);
	
/**

	 **
	 * Constructs a new MediaItem with all the attributes initially needed.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public MediaItem()
	{
		super(new com.exedio.cope.lib.AttributeValue[]{
		});
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * <p><small>Generated by the cope instrumentor.</small>
	 * @see Item#Item(com.exedio.cope.lib.util.ReactivationConstructorDummy,int)
	 *
 */private MediaItem(com.exedio.cope.lib.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * Returns a URL pointing to the data of the persistent attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getFileURL()
	{
		return getMediaURL(MediaItem.file);
	}/**

	 **
	 * Returns the major mime type of the persistent media attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getFileMimeMajor()
	{
		return getMediaMimeMajor(MediaItem.file);
	}/**

	 **
	 * Returns the minor mime type of the persistent media attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getFileMimeMinor()
	{
		return getMediaMimeMinor(MediaItem.file);
	}/**

	 **
	 * Returns a stream for fetching the data of the persistent media attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.io.InputStream getFileData()
	{
		return getMediaData(MediaItem.file);
	}/**

	 **
	 * Provides data for the persistent media attribute {@link #file}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final void setFileData(final java.io.InputStream data,final java.lang.String mimeMajor,final java.lang.String mimeMinor)throws java.io.IOException
	{
		try
		{
			setMediaData(MediaItem.file,data,mimeMajor,mimeMinor);
		}
		catch(com.exedio.cope.lib.NotNullViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
	}/**

	 **
	 * Returns a URL pointing to the data of the persistent attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getImageURL()
	{
		return getMediaURL(MediaItem.image);
	}/**

	 **
	 * Returns a URL pointing to the varied data of the persistent attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getImageURLBB240()
	{
		return getMediaURL(MediaItem.imageBB240);
	}/**

	 **
	 * Returns the major mime type of the persistent media attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getImageMimeMajor()
	{
		return getMediaMimeMajor(MediaItem.image);
	}/**

	 **
	 * Returns the minor mime type of the persistent media attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getImageMimeMinor()
	{
		return getMediaMimeMinor(MediaItem.image);
	}/**

	 **
	 * Returns a stream for fetching the data of the persistent media attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.io.InputStream getImageData()
	{
		return getMediaData(MediaItem.image);
	}/**

	 **
	 * Provides data for the persistent media attribute {@link #image}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final void setImageData(final java.io.InputStream data,final java.lang.String mimeMinor)throws java.io.IOException
	{
		try
		{
			setMediaData(MediaItem.image,data,null,mimeMinor);
		}
		catch(com.exedio.cope.lib.NotNullViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
	}/**

	 **
	 * Returns a URL pointing to the data of the persistent attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getPhotoURL()
	{
		return getMediaURL(MediaItem.photo);
	}/**

	 **
	 * Returns a URL pointing to the varied data of the persistent attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getPhotoURLBB65()
	{
		return getMediaURL(MediaItem.photoBB65);
	}/**

	 **
	 * Returns a URL pointing to the varied data of the persistent attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getPhotoURLProgressive()
	{
		return getMediaURL(MediaItem.photoProgressive);
	}/**

	 **
	 * Returns the major mime type of the persistent media attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getPhotoMimeMajor()
	{
		return getMediaMimeMajor(MediaItem.photo);
	}/**

	 **
	 * Returns the minor mime type of the persistent media attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.lang.String getPhotoMimeMinor()
	{
		return getMediaMimeMinor(MediaItem.photo);
	}/**

	 **
	 * Returns a stream for fetching the data of the persistent media attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final java.io.InputStream getPhotoData()
	{
		return getMediaData(MediaItem.photo);
	}/**

	 **
	 * Provides data for the persistent media attribute {@link #photo}.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */final void setPhotoData(final java.io.InputStream data)throws java.io.IOException
	{
		try
		{
			setMediaData(MediaItem.photo,data,null,null);
		}
		catch(com.exedio.cope.lib.NotNullViolationException e)
		{
			throw new com.exedio.cope.lib.NestingRuntimeException(e);
		}
	}/**

	 **
	 * The persistent type information for mediaItem.
	 * <p><small>Generated by the cope instrumentor.</small>
	 *
 */public static final com.exedio.cope.lib.Type TYPE = 
		new com.exedio.cope.lib.Type(MediaItem.class)
;}
