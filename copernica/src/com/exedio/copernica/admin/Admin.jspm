<%
/*
 * Copyright (C) 2004-2005  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.copernica.admin;

import java.io.IOException;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;

import com.exedio.cope.Model;
import com.exedio.cope.pattern.Media;
import com.exedio.cope.pattern.HttpPath;
import com.exedio.cope.pattern.HttpRedirect;
import com.exedio.cope.util.PoolCounter;

final class Admin_Jspm
{
	static final void write(
				final PrintStream out,
				final HttpServletRequest request,
				final Model model)
		throws IOException
	{
		final AdminCop cop = AdminCop.getCop(request);
%>
<html>
	<head>
		<meta http-equiv="content-type" content="text/html; charset=<%=AdminServlet.ENCODING%>">
		<title>COPE Administration</title>
		<link rel="STYLESHEET" type="text/css" href="admin.css"><%
		cop.writeHead(out);
		%>
	</head>
	<body>
		<h1>COPE Administration</h3>

		<form action="<%=cop%>" method="POST">
			Database:
			<br>
			<input type="submit" name="CREATE" value="create" />
			<input type="submit" name="TEARDOWN" value="tear down"/>
			<input type="submit" name="DROP" value="drop"/>
			<br>
			<%
				if(request.getParameter("CREATE")!=null)
				{
					model.createDatabase();
					%><div class="message">Database successfully created!</div><%
				}
				else if(request.getParameter("TEARDOWN")!= null)
				{
					model.tearDownDatabase();
					%><div class="message">Database successfully torn down!</div><%
				}
				else if(request.getParameter("DROP")!=null)
				{
					model.dropDatabase();
					%><div class="message">Database successfully dropped!</div><%
				}
				else if(request.getParameter("APPLY")!=null)
				{
					%><hr>
					<a href="<%=cop%>">flush log</a><%
	%>
	<ol><%
					SchemaCop.writeApply(out, request, model);
	%>
	</ol><%
					%>
					<a href="<%=cop%>">flush log</a>
					<hr><%
				}
			%>
			<p><%
			
			final AdminCop[] tabs = new AdminCop[]{
				cop.toProperties(),
				cop.toSchema(),
				cop.toConnectionPoolStats(),
				cop.toMediaStats(),
			};
			for(int i = 0; i<tabs.length; i++)
			{
				final AdminCop tab = tabs[i];
				if(cop.name.equals(tab.name))
				{
				%>
				| <b><%=tab.name%></b><%
				}
				else
				{
				%>
				| <a href="<%=tab%>"><%=tab.name%></a><%
				}
			}
			
			%>
			</p>
			<hr><%
			cop.writeBody(out, model);
			%>
		</form>
	</body>
</html>
<%
	}
	final static void write(final PrintStream out, final PoolCounter poolCounter)
		throws IOException
	{
	final SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss.SSS");
	final String[] names = new String[]{
		"Loss",
		"Level",
		"Level Max",
		"Create",
		"Destroy",
	};
	%>
	<table class="statistics">
		<tr>
			<th colspan="7">Connection Pool Statistics</th>
		</tr>
		<tr>
			<th>From</th>
			<td colspan="6"><%=df.format(poolCounter.getStart())%></td>
		</tr>
		<tr>
			<th>To</th>
			<td colspan="6"><%=df.format(new Date())%></td>
		</tr>
		<tr>
			<th>Get</th>
			<td colspan="6"><%=poolCounter.getGetCounter()%></td>
		</tr>
		<tr>
			<th>Put</th>
			<td colspan="6"><%=poolCounter.getPutCounter()%></td>
		</tr><%
		writeColouredHeader(out, names, 1);
		%>
		<tr>
			<th>Size</th><%
			writeColouredHeaderSchnips(out, names);
			%>
			<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
		</tr><%
		for(Iterator i = poolCounter.getPools().iterator(); i.hasNext(); )
		{
			final PoolCounter.Pool pool = (PoolCounter.Pool)i.next();
			final boolean inconsistent = !pool.isConsistent();
			final int[] data = new int[]{
					pool.getLoss(),
					pool.getLevel(),
					pool.getMaxLevel(),
					pool.getCreateCounter(),
					pool.getDestroyCounter(),
				};
		%>
		<tr<%if(inconsistent){%> class="inconsistent"<%}%>>
			<td><%=pool.getSize()%><%if(inconsistent){%>!<%}%></td><%
			writeColouredData(out, data);
			%>
		</tr><%
		}
	%>
	</table><%
	}

	final static void writeMediaStats(final PrintStream out, final Collection entities, final String prefix)
		throws IOException
	{
	final SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss.SSS");
	final String[] names = new String[]{
		"Entity Found, but no Item",
		"Item Found, but Data is Null",
		"Data is Not Null, but Not Modified",
		"No &quot;Not Modified&quot; 304 Possible",
		"Data Completely Delivered",
	};
	%>
	<table class="statistics">
		<tr><th colspan="8">Media Statistics</th></tr>
		<tr><th>To</th><td colspan="7"><%=df.format(new Date())%></td></tr><%
		writeColouredHeader(out, names, 2);
		%>
		<tr>
			<th>type</th>
			<th>entity</th><%
			writeColouredHeaderSchnips(out, names);
			%>
			<th>From</th>
		</tr><%
		for(Iterator i = entities.iterator(); i.hasNext(); )
		{
			final HttpPath path = (HttpPath)i.next();
			final String type = path.getType().getID();
			final String name = path.getName();
			final int[] data;
			if(path instanceof Media)
			{
				final Media entity = (Media)path;
				final int entityFound = entity.entityFound.get();
				final int itemFound = entity.itemFound.get();
				final int dataNotNull = entity.dataNotNull.get();
				final int modified = entity.modified.get();
				final int fullyDelivered = entity.fullyDelivered.get();
				data = new int[]{entityFound, itemFound, dataNotNull, modified, fullyDelivered};
			}
			else
			{
				final HttpRedirect redirect = (HttpRedirect)path;
				final int entityFound = redirect.entityFound.get();
				final int fullyDelivered = redirect.fullyDelivered.get();
				data = new int[]{entityFound, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, fullyDelivered};
			}
			%>
		<tr>
			<td><%=type%></td>
			<td><a href="<%=prefix%><%=type%>/<%=name%>/0"><%=name%></a><%
			if(path instanceof HttpRedirect)
			{
				final HttpRedirect redirect = (HttpRedirect)path;
				%> --&gt; <%=redirect.getTarget().getName()%><%
			}
			%></td><%
			writeColouredData(out, data);
			%>
			<td><%=df.format(path.getStart())%></td>
		</tr><%
		}
	%>
	</table><%
	}

	private static final void writeColouredHeader(final PrintStream out, final String[] names, final int preColumns)
	{
		%>
		<tr>
			<th colspan="<%=preColumns%>" rowspan="<%=names.length%>"></th>
			<th colspan="<%=names.length + 1%>" class="colored1"><%=names[0]%></th>
		</tr><%

		for(int i = 1; i<names.length; i++)
		{
		%>
		<tr>
			<th rowspan="<%=names.length-i+1%>" class="colored<%=i%>"></th>
			<th colspan="<%=names.length-i+1%>" class="colored<%=i+1%>"><%=names[i]%></th>
		</tr><%
		}
	}

	private static final void writeColouredHeaderSchnips(final PrintStream out, final String[] names)
	{
		%>
			<th class="colored<%=names.length%>"></th><%
	}

	private static final void writeColouredData(final PrintStream out, final int[] data)
	{
		for(int j = 0; j<data.length; j++)
		{
		%>
			<td class="colored<%=j+1%>"><%
			switch(data[j])
			{
			case 0:
				%>&nbsp;<%
				break;
			case Integer.MIN_VALUE:
				%>-<%
				break;
			default:
				%><%=data[j]%><%
				break;
			}
			%></td><%
		}
	}

}%>