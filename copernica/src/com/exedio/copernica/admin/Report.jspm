<%
/*
 * Copyright (C) 2004-2005  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.copernica.admin;

import java.io.IOException;
import java.io.PrintStream;
import java.util.Date;
import java.util.Iterator;

import com.exedio.cope.Model;
import com.exedio.dsmf.ReportColumn;
import com.exedio.dsmf.ReportConstraint;
import com.exedio.dsmf.ReportLastAnalyzed;
import com.exedio.dsmf.ReportSchema;
import com.exedio.dsmf.ReportTable;

final class Report_Jspm
{
	private static final String color(final int color)
	{
		switch(color)
		{
		case ReportSchema.COLOR_OK:
			return "ok";
		case ReportSchema.COLOR_WARNING:
			return "warning";
		case ReportSchema.COLOR_ERROR:
			return "error";
		default:
			throw new RuntimeException(String.valueOf(color));
		}
	}
	
	private static final String type(final int type)
	{
		switch(type)
		{
		case ReportConstraint.TYPE_CHECK:
			return "check";
		case ReportConstraint.TYPE_PRIMARY_KEY:
			return "pk";
		case ReportConstraint.TYPE_FOREIGN_KEY:
			return "fk";
		case ReportConstraint.TYPE_UNIQUE:
			return "unique";
		default:
			throw new RuntimeException(String.valueOf(type));
		}
	}
	
	final static void writeReport(final PrintStream out, final Model model, final ReportCop cop)
		throws IOException
	{
		final ReportSchema report = model.reportDatabase();
		final String reportColor = color(report.getCumulativeColor());
		final boolean narrowReport = cop.isNarrowReport();

%>
drop boxes: <a href="<%=cop.toggleDropBoxes()%>"><%=cop.showDropBoxes?"hide":"show"%></a><br>
rename fields: <a href="<%=cop.toggleRenameFields()%>"><%=cop.showRenameFields?"hide":"show"%></a><br>
check all:
<input type="button" value="analyze" onClick="checkAll(&quot;ANALYZE_TABLE&quot;)">
<input type="button" value="drop table" onClick="checkAll(&quot;DROP_TABLE&quot;)">
<input type="button" value="drop column" onClick="checkAll(&quot;DROP_COLUMN&quot;)">
<br>
<span class="<%=reportColor%>"><%
if(narrowReport)
{
	%><a href="<%=cop.widenReport()%>"><%
}
%>Schema<%
if(narrowReport)
{
	%></a><%
}
%></span>
<input type="submit" name="APPLY" value="apply"/>
supports check constraints: <i><%if(model.supportsCheckConstraints()){%>yes<%}else{%>no<%}%></i>
<ul class="<%=reportColor%>"><%

int tableCount = 1;
for(Iterator i = report.getTables().iterator(); i.hasNext(); tableCount++)
{
	final ReportTable table = (ReportTable)i.next();
	
	if(cop.skipTable(table))
		continue;
	
	final String tableColor = color(table.getCumulativeColor());
	%>
	<li class="<%=tableColor%>"><%
	
	%><small>tab<%=tableCount%></small> <%
	if(!narrowReport)
	{
		%><a href="<%=cop.narrowReport(table)%>"><%
	}
	%><%=table.name%><%
	if(!narrowReport)
	{
		%></a><%
	}
	if(cop.showRenameFields && table.exists())
	{
		%>
		<input name="RENAME_TABLE_<%=table.name%>" size="<%=table.name.length()%>"/><%
	}
	
	final String tableError = table.getError();
	if(tableError!=null)
	{
		%> <span class="<%=color(table.getParticularColor())
										%>"><%=tableError%></span><%
	}
	if(table.exists())
	{
		if(cop.showDropBoxes)
		{
			%>,
		<input type="checkbox" name="DROP_TABLE" value="<%=table.name%>"/>drop<%
		}
	}
	else if(table.required())
	{
		%>,
		<input type="checkbox" name="CREATE_TABLE" value="<%=table.name%>"/>create<%
	}
	
	final ReportLastAnalyzed lastAnalyzed = table.getLastAnalyzed();

	if(!narrowReport)
	{
		if(lastAnalyzed!=null)
		{
			final Date date = lastAnalyzed.lastAnalyzed;
			final String lastAnalyzedString = date!=null ? date.toString() : "NEVER";
			%>
			<input type="checkbox" name="ANALYZE_TABLE" value="<%=table.name%>"/>analyze (<%=lastAnalyzedString%>)<%
		}
	}
	else
	{
	%>
		<ul><%
		if(lastAnalyzed!=null)
		{
			final Date date = lastAnalyzed.lastAnalyzed;
			final String lastAnalyzedString = date!=null ? date.toString() : "NEVER";
			%>
			<li class="<%=color(lastAnalyzed.getCumulativeColor())%>">
				last analyzed: <%=lastAnalyzedString%>
				<input type="checkbox" name="ANALYZE_TABLE" value="<%=table.name%>"/>analyze
			</li><%
		}
		
		int columnCount = 1;
		for(Iterator j = table.getColumns().iterator(); j.hasNext(); columnCount++)
		{
			final ReportColumn column = (ReportColumn)j.next();
			final String color = color(column.getCumulativeColor());
			%>
			<li class="<%=color%>">
				<small>col<%=columnCount%></small> <%=column.getName()%><%
			
			if(cop.showRenameFields && column.exists())
			{
				%>
				<input name="RENAME_COLUMN_<%=
					table.name%>#<%=column.getName()%>" size="<%=
					column.getName().length()%>"/><%
			}
			
			final String columnType = column.getType();
			%>
				<small><%=columnType%></small><%
			
			if(cop.showRenameFields && column.exists())
			{
				%>
				<input name="MODIFY_COLUMN_<%=
					table.name%>#<%=column.getName()%>" size="<%=
					columnType.length()%>"/><%
			}
			
			final String error = column.getError();
			if(error!=null)
			{
				%>
				<span class="<%=color(column.getParticularColor())%>"><%=error%></span><%
			}
			if(column.exists())
			{
				if(cop.showDropBoxes)
				{
					%>,
				<input type="checkbox" name="DROP_COLUMN" value="<%=table.name%>#<%=column.getName()%>"/>drop<%
				}
			}
			else if(column.required() &&
						column.getTable().exists() )
			{
				%>,
				<input type="checkbox" name="CREATE_COLUMN" value="<%=table.name%>#<%=column.getName()%>"/>create<%
			}
			%>
			</li><%
		}
		
		int constraintCount = 1;
		for(Iterator j = table.getConstraints().iterator(); j.hasNext(); constraintCount++)
		{
			final ReportConstraint constraint = (ReportConstraint)j.next();
			final String constraintColor = color(constraint.getCumulativeColor());
			%>
			<li class="<%=constraintColor%>">
				<small><%=type(constraint.type)%><%=constraintCount%></small> <%=constraint.name%><%
			
			final String constraintCondition = constraint.requiredCondition;
			if(constraintCondition!=null)
			{
				%> <small><%=constraintCondition%></small><%
			}
			
			final String constraintError = constraint.getError();
			if(constraintError!=null)
			{
				%>
				<span class="<%=color(constraint.getParticularColor())%>"><%=constraintError%></span><%
			}
			if(constraint.exists())
			{
				if(cop.showDropBoxes)
				{
					%>
				<input type="checkbox" name="DROP_CONSTRAINT" value="<%=constraint.name%>"/>drop<%
				}
			}
			else if( constraint.required() &&
						constraint.table.exists() )
			{
				%>
				<input type="checkbox" name="CREATE_CONSTRAINT" value="<%=constraint.name%>"/>create<%
			}
			%>
			</li><%
		}
		%>
		</ul><%
	}
	%>
	</li><%
}
%>
</ul><%

	}
	
	final static void writeHead(final PrintStream out) throws IOException
	{
		%>
		<script src="admin-report.js" type="text/javascript"></script><%
	}
	
	final static void writeDone(final PrintStream out, final long startTime)
		throws IOException
	{
		final long endTime = System.currentTimeMillis();
		%><li class="timelog">ok, <%=endTime-startTime%>ms.</li><%
		out.flush();
	}
	
	final static void writeDrop(final PrintStream out, final ReportColumn column)
		throws IOException
	{
		%>
		<li>report.getTable(&quot;<b><%=
			column.getTable().name%></b>&quot;).getColumn(&quot;<b><%=
			column.getName()%></b>&quot;).drop();</li><%
	}

	final static void writeDrop(final PrintStream out, final ReportTable table)
		throws IOException
	{
		%>
		<li>report.getTable(&quot;<b><%=
			table.name%></b>&quot;).drop();</li><%
	}

	final static void writeRename(final PrintStream out, final ReportTable table, final String targetName)
		throws IOException
	{
		%>
		<li>report.getTable(&quot;<b><%=
			table.name%></b>&quot;).renameTo(&quot;<%=
			targetName%>&quot;);</li><%
	}

	final static void writeModify(final PrintStream out, final ReportColumn column, final String targetType)
		throws IOException
	{
		%>
		<li>report.getTable(&quot;<b><%=
			column.getTable().name%></b>&quot;).getColumn(&quot;<b><%=
			column.getName()%></b>&quot;).modify(&quot;<b><%=
			targetType%></b>&quot;);</li><%
	}

	final static void writeRename(final PrintStream out, final ReportColumn column, final String targetName)
		throws IOException
	{
		%>
		<li>report.getTable(&quot;<b><%=
			column.getTable().name%></b>&quot;).getColumn(&quot;<b><%=
			column.getName()%></b>&quot;).renameTo(&quot;<b><%=
			targetName%></b>&quot;);</li><%
	}

	final static void writeCreate(final PrintStream out, final ReportTable table)
		throws IOException
	{
		%>
		<li>report.getTable(&quot;<b><%=
			table.name%></b>&quot;).create();</li><%
	}

	final static void writeAnalyze(final PrintStream out, final ReportTable table)
		throws IOException
	{
		%>
		<li>report.getTable(&quot;<b><%=
			table.name%></b>&quot;).analyze();</li><%
	}
	
	final static void writeCreate(final PrintStream out, final ReportColumn column)
		throws IOException
	{
		%>
		<li>report.getTable(&quot;<b><%=
			column.getTable().name%></b>&quot;).getColumn(&quot;<b><%=
			column.getName()%></b>&quot;).create();</li><%
	}

}
%>